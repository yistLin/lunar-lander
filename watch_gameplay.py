# -*- coding: utf-8 -*-
"""Lunar Lander v2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YA7QsZsgIil-8NiWezSeKHzt9lRRE5JT
"""

from argparse import ArgumentParser

import torch
import torch.nn as nn
from torch.distributions import Categorical

import gym


class Agent():
    """An agent trained with REINFORCE algorithm."""

    def __init__(self):
        self.network = nn.Sequential(
            nn.Linear(8, 64),
            nn.ReLU(),
            nn.Linear(64, 32),
            nn.ReLU(),
            nn.Linear(32, 4),
            nn.Softmax(dim=-1),
        )

    def sample(self, state):
        """Sample an action from the network according to the given state."""
        state = torch.FloatTensor(state)

        action_prob = self.network(state)
        action_distribution = Categorical(action_prob)
        action = action_distribution.sample()

        return action.cpu().item()


def main(model_path, n_rounds):
    """Train an agent to play Lunar Lander."""

    env = gym.make('LunarLander-v2')

    agent = Agent()

    state_dict = torch.load(model_path)
    agent.network.load_state_dict(state_dict)
    agent.network.eval()

    for i in range(n_rounds):

        state = env.reset()
        total_reward, total_step = 0, 0

        while True:
            env.render()
            action = agent.sample(state)
            state, reward, done, _ = env.step(action)
            total_reward += reward
            total_step += 1

            if done:
                print(f"episode {i+1:3d}, "
                      f"total_reward = {total_reward:6.1f}, "
                      f"total step: {total_step:4d}")
                break


def parse_args():
    """Parse command-line arguments."""
    parser = ArgumentParser()
    parser.add_argument("model_path", type=str, help="path to saved model")
    parser.add_argument("-n", "--n_rounds", type=int, default=1)
    return vars(parser.parse_args())


if __name__ == "__main__":
    main(**parse_args())
